plugins {
    id 'java'
    id 'war'
    id 'org.springframework.boot' version '3.5.4'
    id 'io.spring.dependency-management' version '1.1.7'
}

group = 'com.spring'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'
    implementation 'org.springframework.boot:spring-boot-starter-jdbc'
    implementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter:3.0.4'
    testImplementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter-test:3.0.4'
    implementation 'org.jsoup:jsoup:1.18.1'

    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-mail'
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    runtimeOnly 'com.oracle.database.jdbc:ojdbc11'
    annotationProcessor 'org.projectlombok:lombok'
    providedRuntime 'org.springframework.boot:spring-boot-starter-tomcat'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    // Jsoup 관련 
    implementation 'org.jsoup:jsoup:1.18.1'
    // <문자메시지 관련 순서1>
    // 문자메시지 보내기 관련(Coolsms SDK)
    implementation "net.nurigo:javaSDK:2.2"

    // mongodb 관련
    // https://mvnrepository.com/artifact/org.mongodb/mongodb-driver-sync
    //implementation 'org.mongodb:mongodb-driver-sync'
    implementation 'org.mongodb:mongodb-driver-sync:5.2.1'

    // Redis 의존성 추가
    //implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    
    // == JSTL 관련 추가 시작 ==
    implementation 'jakarta.servlet.jsp.jstl:jakarta.servlet.jsp.jstl-api:3.0.2'
    compileOnly 'jakarta.servlet:jakarta.servlet-api:6.1.0'
    implementation 'org.glassfish.web:jakarta.servlet.jsp.jstl:3.0.1'
    // == JSTL 관련 추가 끝 ==

    // 내장 톰캣 관련(이것을 설정하지 않으면 경고 및 JSP가 실행되지 않음)
    implementation 'org.apache.tomcat.embed:tomcat-embed-jasper:10.1.42'

    /*
      com.spring.app.config.Datasource_mymvc_user_Configuration 클래스에서 @ConfigurationProperties 을 위한 라이브러리 추가   
      com.spring.app.config.Datasource_hr_Configuration 클래스에서 @ConfigurationProperties 을 위한 라이브러리 추가  
    */
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor:3.5.3'

    // Spring AOP(Aspect Oriented Programming) 라이브러리 추가
    implementation 'org.springframework.boot:spring-boot-starter-aop:3.5.3'

    /*
      CGLib 소개
      CGLIB는 코드 생성 라이브러리로서(Code Generator Library) 
      런타임에 동적으로 자바 클래스의 프록시를 생성해주는 기능을 제공한다. 
      CGLIB를 사용하면 매우 쉽게 프록시 객체를 생성할 수 있으며, 성능 또한 우수하다. 
      더불어, 인터페이스가 아닌 클래스에 대해서 동적 프록시를 생성할 수 있기 때문에 다양한 프로젝트에서 널리 사용되고 있다. 
      Spring은 프록시 기반의 AOP를 구현할 때 CGLIB를 사용하고 있다.
           
      CGLib 란? java 에서 프록시 구현시 유용하게 쓸 수 있는 라이브러리.
           
      ※ 스프링 AOP구현 방식은 2가지가 있습니다.

      1. 대상객체가 인터페이스 구현방식으로 구현되었을 경우
         -> 일반적인 proxy pattern 을 이용하여 AOP구현
         
      2. 대상객체가 인터페이스를 구현 안했을 경우
         -> CGLIB 라이브러리를 이용하여 구현

      CGLIB이란,
      동적으로 대상객체를 상속하는 클래스를 만들어 프록시를 구현한후
      필터클래스를 이용하여 공통의 관심사(Aspect)적용
        
      AOP 구현시 필요한 프록시객체 생성관련 라이브러리 추가하기 
      (#스프링보안02) Spring Security 어노테이션을 사용하기 위해서는 cglib 가 필요하다. 
    */
    implementation 'cglib:cglib:3.3.0'
   
    // Spring TX(Transaction) 라이브러리 추가
    implementation 'org.springframework:spring-tx:6.2.8'
   
    // JSON 관련 라이브러리 추가하기
    implementation 'org.springframework.boot:spring-boot-starter-json:3.5.3'
    implementation 'org.json:json:20250517'
    implementation 'com.googlecode.json-simple:json-simple:1.1.1'
    implementation 'com.google.code.gson:gson:2.13.1'
   
    // 파일업로드 및 다운로드 관련 라이브러리 추가하기
    implementation 'commons-fileupload:commons-fileupload:1.6.0'
    implementation 'commons-io:commons-io:2.19.0'
   
    /*
      아파치 POI(Apache POI)는 아파치 소프트웨어 재단에서 만든 라이브러리로서 
      마이크로소프트 오피스파일 포맷을 순수 자바 언어로서 읽고 쓰는 기능을 제공한다. 
      주로 워드, 엑셀, 파워포인트와 파일을 지원하며 최근의 오피스 포맷인 
      Office Open XML File Formats(OOXML, 즉 xml 기반의 *.docx, *.xlsx, *.pptx 등) 이나 
      아웃룩, 비지오, 퍼블리셔 등으로 지원 파일 포맷을 늘려가고 있다. 
      poi-ooxml은 excel 2007이후 버전이며 이때 schemas도 같이 porting을 해줘야 xlsx 파일을 읽어들인다. 
      poi는 excel 2007포함한 이전 버전이다.  
    */
    implementation 'org.apache.poi:poi:5.3.0'
    implementation 'org.apache.poi:poi-ooxml:5.3.0'
    implementation 'org.apache.xmlbeans:xmlbeans:5.3.0'
   
    // log4j 관련 
    implementation 'org.lazyluke:log4jdbc-remix:0.2.7'
   
    // 이미지 썸네일 생성 라이브러리
    implementation 'net.coobird:thumbnailator:0.4.20'
   
    // Spring websocket dependency를 추가(#웹채팅관련1)
    implementation 'org.springframework.boot:spring-boot-starter-websocket:3.4.7'
   
    // e메일 관련
    implementation 'javax.activation:activation:1.1.1'
    implementation 'com.sun.mail:javax.mail:1.6.2'
   
    // AES-256 양방향 암호화/복호화
    implementation 'commons-codec:commons-codec:1.18.0'
   
    /*
      Lombok(롬복)은 Domain(Entity)클래스(VO 클래스, DTO 클래스) 생성시 
      반복되는 getter, setter, toString 등의 메소드 작성 코드를 줄여주는 라이브러리 이다.
    */
    // compileOnly 'org.projectlombok:lombok:1.18.38'
    // annotationProcessor 'org.projectlombok:lombok:1.18.38'
   
    // Spring Security 태그 사용하기 위한 taglibs 라이브러리
    implementation 'org.springframework.security:spring-security-taglibs:6.4.2'
   
    // 스프링 시큐리티
    implementation 'org.springframework.boot:spring-boot-starter-security:3.4.1'
    
    // === Query DSL 에 필요한 것들 ===
    implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
    annotationProcessor 'com.querydsl:querydsl-apt:5.0.0:jakarta'
    annotationProcessor 'jakarta.annotation:jakarta.annotation-api'
    annotationProcessor 'jakarta.persistence:jakarta.persistence-api'
}

tasks.named('test') {
    useJUnitPlatform()
}

// Java 컴파일러에게 파라미터 이름을 class 파일에 기록하라고 지시
tasks.withType(JavaCompile) {
    options.compilerArgs << '-parameters'
}

// === QClass 관련 설정 === 
def generatedDir = file("$buildDir/generated/querydsl")
tasks.withType(JavaCompile).configureEach {
    options.annotationProcessorGeneratedSourcesDirectory = generatedDir
}

sourceSets {
    main {
        java {
            srcDirs += generatedDir
        }
    }
}

tasks.clean {
    delete generatedDir
}